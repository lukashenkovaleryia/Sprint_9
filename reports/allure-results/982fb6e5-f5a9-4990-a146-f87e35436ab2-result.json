{"name": "Создаем и загружаем рецепт", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: create container: Error response from daemon: No such image: seleniarm/standalone-chromium:114.0; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception", "trace": "@pytest.fixture\n    @allure.title(\"Подключаем удаленный или локальный драйвер в зависимости от флага REMOTE_DRIVER\")\n    def driver():\n        if REMOTE_DRIVER:\n            options = ChromeOptions()\n            options.set_capability(\"browserName\", \"chrome\")\n            options.set_capability(\"browserVersion\", \"114.0\")\n            options.set_capability(\"selenoid:options\", {\n                \"enableVNC\": True,\n                \"enableVideo\": False\n            })\n    \n>           driver = webdriver.Remote(\n                command_executor='http://selenoid:4444/wd/hub',\n                options=options\n            )\n\ntests/conftest.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:263: in __init__\n    self.start_session(capabilities)\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:366: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0xffff978bf6d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"create container: Error response from daemon: No such image: seleniarm/standalone-chromium:114.0\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: create container: Error response from daemon: No such image: seleniarm/standalone-chromium:114.0; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "start": 1759503918782, "stop": 1759503918782, "uuid": "b5290469-9ed2-41f5-b29c-4a11d1f188af", "historyId": "fb371a672bfbc2b009f13ba74b9cf859", "testCaseId": "fb371a672bfbc2b009f13ba74b9cf859", "fullName": "tests.test_recipe.TestRecipe#test_create_and_upload_recipe", "labels": [{"name": "suite", "value": "Создание рецептов"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestRecipe"}, {"name": "host", "value": "a99b36143dfd"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_recipe"}], "titlePath": ["tests", "test_recipe.py", "TestRecipe"]}